use std::fmt::{Display, Formatter, Debug};
use std::num::NonZeroI32;

pub enum ErrCode {
    CL_SUCCESS = cl_sys::CL_SUCCESS as isize,
    CL_DEVICE_NOT_FOUND = cl_sys::CL_DEVICE_NOT_FOUND as isize,
    CL_DEVICE_NOT_AVAILABLE = cl_sys::CL_DEVICE_NOT_AVAILABLE as isize,
    CL_COMPILER_NOT_AVAILABLE = cl_sys::CL_COMPILER_NOT_AVAILABLE as isize,
    CL_MEM_OBJECT_ALLOCATION_FAILURE = cl_sys::CL_MEM_OBJECT_ALLOCATION_FAILURE as isize,
    CL_OUT_OF_RESOURCES = cl_sys::CL_OUT_OF_RESOURCES as isize,
    CL_OUT_OF_HOST_MEMORY = cl_sys::CL_OUT_OF_HOST_MEMORY as isize,
    CL_PROFILING_INFO_NOT_AVAILABLE = cl_sys::CL_PROFILING_INFO_NOT_AVAILABLE as isize,
    CL_MEM_COPY_OVERLAP = cl_sys::CL_MEM_COPY_OVERLAP as isize,
    CL_IMAGE_FORMAT_MISMATCH = cl_sys::CL_IMAGE_FORMAT_MISMATCH as isize,
    CL_IMAGE_FORMAT_NOT_SUPPORTED = cl_sys::CL_IMAGE_FORMAT_NOT_SUPPORTED as isize,
    CL_BUILD_PROGRAM_FAILURE = cl_sys::CL_BUILD_PROGRAM_FAILURE as isize,
    CL_MAP_FAILURE = cl_sys::CL_MAP_FAILURE as isize,
    CL_MISALIGNED_SUB_BUFFER_OFFSET = cl_sys::CL_MISALIGNED_SUB_BUFFER_OFFSET as isize,
    CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST = cl_sys::CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST as isize,
    CL_COMPILE_PROGRAM_FAILURE = cl_sys::CL_COMPILE_PROGRAM_FAILURE as isize,
    CL_LINKER_NOT_AVAILABLE = cl_sys::CL_LINKER_NOT_AVAILABLE as isize,
    CL_LINK_PROGRAM_FAILURE = cl_sys::CL_LINK_PROGRAM_FAILURE as isize,
    CL_DEVICE_PARTITION_FAILED = cl_sys::CL_DEVICE_PARTITION_FAILED as isize,
    CL_KERNEL_ARG_INFO_NOT_AVAILABLE = cl_sys::CL_KERNEL_ARG_INFO_NOT_AVAILABLE as isize,
    CL_INVALID_VALUE = cl_sys::CL_INVALID_VALUE as isize,
    CL_INVALID_DEVICE_TYPE = cl_sys::CL_INVALID_DEVICE_TYPE as isize,
    CL_INVALID_PLATFORM = cl_sys::CL_INVALID_PLATFORM as isize,
    CL_INVALID_DEVICE = cl_sys::CL_INVALID_DEVICE as isize,
    CL_INVALID_CONTEXT = cl_sys::CL_INVALID_CONTEXT as isize,
    CL_INVALID_QUEUE_PROPERTIES = cl_sys::CL_INVALID_QUEUE_PROPERTIES as isize,
    CL_INVALID_COMMAND_QUEUE = cl_sys::CL_INVALID_COMMAND_QUEUE as isize,
    CL_INVALID_HOST_PTR = cl_sys::CL_INVALID_HOST_PTR as isize,
    CL_INVALID_MEM_OBJECT = cl_sys::CL_INVALID_MEM_OBJECT as isize,
    CL_INVALID_IMAGE_FORMAT_DESCRIPTOR = cl_sys::CL_INVALID_IMAGE_FORMAT_DESCRIPTOR as isize,
    CL_INVALID_IMAGE_SIZE = cl_sys::CL_INVALID_IMAGE_SIZE as isize,
    CL_INVALID_SAMPLER = cl_sys::CL_INVALID_SAMPLER as isize,
    CL_INVALID_BINARY = cl_sys::CL_INVALID_BINARY as isize,
    CL_INVALID_BUILD_OPTIONS = cl_sys::CL_INVALID_BUILD_OPTIONS as isize,
    CL_INVALID_PROGRAM = cl_sys::CL_INVALID_PROGRAM as isize,
    CL_INVALID_PROGRAM_EXECUTABLE = cl_sys::CL_INVALID_PROGRAM_EXECUTABLE as isize,
    CL_INVALID_KERNEL_NAME = cl_sys::CL_INVALID_KERNEL_NAME as isize,
    CL_INVALID_KERNEL_DEFINITION = cl_sys::CL_INVALID_KERNEL_DEFINITION as isize,
    CL_INVALID_KERNEL = cl_sys::CL_INVALID_KERNEL as isize,
    CL_INVALID_ARG_INDEX = cl_sys::CL_INVALID_ARG_INDEX as isize,
    CL_INVALID_ARG_VALUE = cl_sys::CL_INVALID_ARG_VALUE as isize,
    CL_INVALID_ARG_SIZE = cl_sys::CL_INVALID_ARG_SIZE as isize,
    CL_INVALID_KERNEL_ARGS = cl_sys::CL_INVALID_KERNEL_ARGS as isize,
    CL_INVALID_WORK_DIMENSION = cl_sys::CL_INVALID_WORK_DIMENSION as isize,
    CL_INVALID_WORK_GROUP_SIZE = cl_sys::CL_INVALID_WORK_GROUP_SIZE as isize,
    CL_INVALID_WORK_ITEM_SIZE = cl_sys::CL_INVALID_WORK_ITEM_SIZE as isize,
    CL_INVALID_GLOBAL_OFFSET = cl_sys::CL_INVALID_GLOBAL_OFFSET as isize,
    CL_INVALID_EVENT_WAIT_LIST = cl_sys::CL_INVALID_EVENT_WAIT_LIST as isize,
    CL_INVALID_EVENT = cl_sys::CL_INVALID_EVENT as isize,
    CL_INVALID_OPERATION = cl_sys::CL_INVALID_OPERATION as isize,
    CL_INVALID_GL_OBJECT = cl_sys::CL_INVALID_GL_OBJECT as isize,
    CL_INVALID_BUFFER_SIZE = cl_sys::CL_INVALID_BUFFER_SIZE as isize,
    CL_INVALID_MIP_LEVEL = cl_sys::CL_INVALID_MIP_LEVEL as isize,
    CL_INVALID_GLOBAL_WORK_SIZE = cl_sys::CL_INVALID_GLOBAL_WORK_SIZE as isize,
    CL_INVALID_PROPERTY = cl_sys::CL_INVALID_PROPERTY as isize,
    CL_INVALID_IMAGE_DESCRIPTOR = cl_sys::CL_INVALID_IMAGE_DESCRIPTOR as isize,
    CL_INVALID_COMPILER_OPTIONS = cl_sys::CL_INVALID_COMPILER_OPTIONS as isize,
    CL_INVALID_LINKER_OPTIONS = cl_sys::CL_INVALID_LINKER_OPTIONS as isize,
    CL_INVALID_DEVICE_PARTITION_COUNT = cl_sys::CL_INVALID_DEVICE_PARTITION_COUNT as isize,
    CL_INVALID_PIPE_SIZE = cl_sys::CL_INVALID_PIPE_SIZE as isize,
    CL_INVALID_DEVICE_QUEUE = cl_sys::CL_INVALID_DEVICE_QUEUE as isize,
    CL_PLATFORM_NOT_FOUND_KHR = cl_sys::CL_PLATFORM_NOT_FOUND_KHR as isize,
}

pub const ERR_CODES_1_30: [&'static str; 19] = ["CL_DEVICE_NOT_FOUND",
    "CL_DEVICE_NOT_AVAILABLE",
    "CL_COMPILER_NOT_AVAILABLE",
    "CL_MEM_OBJECT_ALLOCATION_FAILURE",
    "CL_OUT_OF_RESOURCES",
    "CL_OUT_OF_HOST_MEMORY",
    "CL_PROFILING_INFO_NOT_AVAILABLE",
    "CL_MEM_COPY_OVERLAP",
    "CL_IMAGE_FORMAT_MISMATCH",
    "CL_IMAGE_FORMAT_NOT_SUPPORTED",
    "CL_BUILD_PROGRAM_FAILURE",
    "CL_MAP_FAILURE",
    "CL_MISALIGNED_SUB_BUFFER_OFFSET",
    "CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST",
    "CL_COMPILE_PROGRAM_FAILURE",
    "CL_LINKER_NOT_AVAILABLE",
    "CL_LINK_PROGRAM_FAILURE",
    "CL_DEVICE_PARTITION_FAILED",
    "CL_KERNEL_ARG_INFO_NOT_AVAILABLE", ];

pub const ERR_CODES_30_1000: [&'static str; 70 - 30 + 1] = ["CL_INVALID_VALUE",
    "CL_INVALID_DEVICE_TYPE",
    "CL_INVALID_PLATFORM",
    "CL_INVALID_DEVICE",
    "CL_INVALID_CONTEXT",
    "CL_INVALID_QUEUE_PROPERTIES",
    "CL_INVALID_COMMAND_QUEUE",
    "CL_INVALID_HOST_PTR",
    "CL_INVALID_MEM_OBJECT",
    "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR",
    "CL_INVALID_IMAGE_SIZE",
    "CL_INVALID_SAMPLER",
    "CL_INVALID_BINARY",
    "CL_INVALID_BUILD_OPTIONS",
    "CL_INVALID_PROGRAM",
    "CL_INVALID_PROGRAM_EXECUTABLE",
    "CL_INVALID_KERNEL_NAME",
    "CL_INVALID_KERNEL_DEFINITION",
    "CL_INVALID_KERNEL",
    "CL_INVALID_ARG_INDEX",
    "CL_INVALID_ARG_VALUE",
    "CL_INVALID_ARG_SIZE",
    "CL_INVALID_KERNEL_ARGS",
    "CL_INVALID_WORK_DIMENSION",
    "CL_INVALID_WORK_GROUP_SIZE",
    "CL_INVALID_WORK_ITEM_SIZE",
    "CL_INVALID_GLOBAL_OFFSET",
    "CL_INVALID_EVENT_WAIT_LIST",
    "CL_INVALID_EVENT",
    "CL_INVALID_OPERATION",
    "CL_INVALID_GL_OBJECT",
    "CL_INVALID_BUFFER_SIZE",
    "CL_INVALID_MIP_LEVEL",
    "CL_INVALID_GLOBAL_WORK_SIZE",
    "CL_INVALID_PROPERTY",
    "CL_INVALID_IMAGE_DESCRIPTOR",
    "CL_INVALID_COMPILER_OPTIONS",
    "CL_INVALID_LINKER_OPTIONS",
    "CL_INVALID_DEVICE_PARTITION_COUNT",
    "CL_INVALID_PIPE_SIZE",
    "CL_INVALID_DEVICE_QUEUE"];

pub const ERR_CODES_1001: &'static str = "CL_PLATFORM_NOT_FOUND_KHR";

#[derive(Debug, Fail)]
pub struct Error {
    err: NonZeroI32,
    msg: String,
}

impl Error {
    pub fn new(err: i32, msg:String) -> Self {
        Self { err: NonZeroI32::new(err).unwrap(), msg }
    }
    pub fn result<T>(value: impl FnOnce()->T, err: i32, msg:impl FnOnce()->String) -> Result<T, Error> {
        assert_eq!(cl_sys::CL_SUCCESS, 0);
        match NonZeroI32::new(err) {
            None => Ok(value()),
            Some(err) => Err(Self { err, msg:msg() })
        }
    }
    pub fn name(&self) -> Option<&'static str> {
        let err = self.err.get();
        if err > -30 {
            ERR_CODES_1_30.get((-err - 1) as usize).cloned()
        } else if err > -1000 {
            ERR_CODES_30_1000.get((-err - 30) as usize).cloned()
        } else if err == -1001 {
            Some(ERR_CODES_1001)
        } else {
            None
        }
    }
}

impl Display for Error {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self.name() {
            Some(s) => write!(f, "{} {}", s,self.msg),
            None => write!(f, "UNKNOWN CODE({}) {}", self.err,self.msg),
        }
    }
}